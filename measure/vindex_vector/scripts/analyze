#!/usr/bin/env python

import fileinput
import numpy
import os.path
import scipy.stats
import sys

reftype = "VirtualOperator"

def main():
	global results

	for path in sys.argv[1:]:
		try:
			if not os.path.basename(path).startswith('measure'):
				continue
		
			results = {}
			parse(path)
			analyze(results)
			
			out_path = os.path.join(os.path.dirname(path), os.path.basename(path).replace('measure', 'analyze'))
			out = open(out_path, 'w')
			report(results, out)
			out.close()
		except Exception, x:
			print "analyze: Failed processing file '%s': %s" % (path, str(x))

def parse(path):
	for line in open(path):
		if line[0] == '#':
			continue
	
		fields = line.split()
		type_name = fields[0]
		time = int(fields[-1])
	
		append_results(results, type_name, time)

def append_results(results, type_name, time):
	try:
		type_result = results[type_name]
	except:
		type_result = {"type_name": type_name, "time": [], "analysis": {}}
		results[type_name] = type_result
	times = type_result["time"]
	times.append(time)

def analyze(results):
	time_ref = results[reftype]["time"]
	for type_name, tresults in results.items():
		time = tresults["time"]
		analysis = tresults["analysis"]
		analysis["mean"] = numpy.mean(time) / 1000
		analysis["std"] = numpy.std(time) / 1000
		analysis["ttest"] = scipy.stats.ttest_ind(time, time_ref, equal_var = False)[1]
		analysis["conclusion"] = " (a != b)" if analysis["ttest"] < 0.01 else ""
	
	mean_ref = results[reftype]["analysis"]["mean"]
	for tresult in results.values():
		analysis = tresult["analysis"]
		analysis["reltime"] = analysis["mean"] / mean_ref

def report(results, out):
	for type_name, tresults in results.items():
		out.write('--- %s ---\n' % type_name)
		out.write("%12s\t%12s\t%8s\t%12s\n" % ("rel time", "mean (us)", "stddev", "ttest pvalue"))
		analysis = tresults["analysis"]
		out.write("%12f\t%12.2f\t%8.2f\t%12f%s\n" % (analysis["reltime"], analysis["mean"], analysis["std"], analysis["ttest"], analysis["conclusion"]))


main()
